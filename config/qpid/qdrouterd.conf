container {
    workerThreads: 4
    containerName: Hono.Example.Container
}

router {
    id: Hono.Example.Router
    mode: standalone
    saslConfigName: qdrouterd
    saslConfigPath: /etc/sasl2/
}

sslProfile {
    name: external
    certDb: /etc/qpid-dispatch/certs/trusted-certs.pem
    certFile: /etc/qpid-dispatch/certs/qdrouter-cert.pem
    keyFile: /etc/qpid-dispatch/certs/qdrouter-key.pem
}

sslProfile {
    name: internal
    certDb: /etc/qpid-dispatch/certs/trusted-certs.pem
    certFile: /etc/qpid-dispatch/certs/qdrouter-cert.pem
    keyFile: /etc/qpid-dispatch/certs/qdrouter-key.pem
    # results in user ID "IoT Eclipse;Hono;hono" for subject "O=IoT Eclipse, OU=Hono, CN=hono"
    uidFormat: oun
}

# external amqps
listener {
    sslProfile: external
    requireSsl: true
    host: 0.0.0.0
    port: 5671
    authenticatePeer: yes
    saslMechanisms: PLAIN
}

# external amqp
listener {
    host: 0.0.0.0
    port: 5672
    authenticatePeer: yes
    saslMechanisms: PLAIN
}

# internal forwarding
listener {
    sslProfile: internal
    requireSsl: true
    host: 0.0.0.0
    port: 5673
    authenticatePeer: yes
    saslMechanisms: EXTERNAL
}

policy {
    maxConnections: 1000
    enableVhostPolicy: true
    policyDir: /etc/qpid-dispatch/policy
    defaultVhost: hono
}

log {
     # One of [‘ROUTER’, ‘ROUTER_CORE’, ‘ROUTER_HELLO’, ‘ROUTER_LS’, ‘ROUTER_MA’, ‘MESSAGE’, ‘SERVER’, ‘AGENT’, ‘CONTAINER’, ‘CONFIG’, ‘ERROR’, ‘DISPATCH’, ‘POLICY’, ‘DEFAULT’]
    module: DEFAULT
     # Levels are: trace, debug, info, notice, warning, error, critical
    enable: debug+
}
